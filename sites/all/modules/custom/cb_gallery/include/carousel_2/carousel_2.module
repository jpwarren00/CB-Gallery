<?php
function carousel_2_theme($existing, $type, $theme, $path) {
  return array(
    'carousel_2_block' => array(
      'arguments' => array(
        'node' => new stdClass()
      ),
      'template' => 'carousel_2_block',
      'file' => 'theme.inc',
      'path' => drupal_get_path('module', 'carousel_2') . '/theme'
    )
  );
}
/**
 * Implementation of hook_theme_registry_alter.  Adding the theme director to node's theme path
 * so node-carousel_2.tpl.php can be picked up
 * 
 * @param $registry
 * @return null
 */
function carousel_2_theme_registry_alter(&$registry) {
  array_unshift($registry['node']['theme paths'], drupal_get_path('module', 'carousel_2') . '/theme');
}
function carousel_2_menu() {
  // path to autocomplete function
  $items['carousel_2/autocomplete'] = array(
    'title' => 'Autocomplete for Flash Video',
    'page callback' => '_carousel_2_autocomplete',
    'access arguments' => array(
      'access content'
    ),
    'type' => MENU_CALLBACK
  );
  // If flash video exists on site! Go Dean!
  return (db_table_exists('content_type_flash_video') ? $items : NULL);
}
function carousel_2_block($op = 'list', $delta = 0, $edit = array()) {
	$block = array();
  if ($op == 'list' && $carousels = carousel_2_block_list()) {
  	//print_r(array('test', 'test2'));
    foreach ($carousels as $key => $carouselnode) {
    	//print_r(array('test', 'test2'));
      $block[$key]['info'] = t('Carousel 2:' . $carouselnode->title);
      $deltas[$key] = $carouselnode->nid;
    }
    variable_set('carousel_2', $deltas, array());
  } else if ($op == 'view' && $deltas = variable_get('carousel_2', array())) {
    foreach ($deltas as $key => $nid) {
      if ($key == $delta) {
        $carousel = node_load($nid);
        if (@$carousel->status == 1) {
          $carousel = carousel_2_load_data($carousel);
          $carousel_2_path = drupal_get_path('module', 'carousel_2');
          drupal_add_js($carousel_2_path . "/js/jquery.tinycarousel.js", $type = 'module', $scope = 'header');
          //drupal_set_html_head("<script type='text/javascript' src='".$carousel_2_path . "/js/carousel_2.js.php?start=1&display=".$carousel->display."&height=".$carousel->height."&width=".$carousel->width."&axis='x'&controls=".$carousel->controls."&pager=".$carousel->pager."&interval=false&intervaltime=".$carousel->interval_time."&rewind=false&animation=true&duration=".$carousel->duration."&callback=null&overlay=".$carousel->overlay."&overlay_toggle=".$carousel->overlay_toggle."&overlay_height=".$carousel->overlay_height."&overlay_y=".$carousel->overlay_y."&cache=a'></script>");
          if ($carousel) {
            // Create JS Settings
            // fix intervaltime naming convention. See jquery.tinycarousel.js
            $carousel_js_settings = array(
              'carousel_2' => array(
                'start' => '1',
                'display' => $carousel['settings']->display,
                'height' => $carousel['settings']->height,
                'width' => $carousel['settings']->width,
                'axis' => 'x',
            		'move_amount' => $carousel['settings']->move_amount,
                'controls' => $carousel['settings']->controls,
                'pager' => $carousel['settings']->pager,
                'interval' => 'false',
                'intervaltime' => $carousel['settings']->interval_time,
                'rewind' => 'false',
                'animation' => 'true',
                'duration' => $carousel['settings']->duration,
                'callback' => null,
                'overlay' => $carousel['settings']->overlay,
                'overlay_toggle' => $carousel['settings']->overlay_toggle,
                'overlay_height' => $carousel['settings']->overlay_height,
                'overlay_y' => $carousel['settings']->overlay_y
              )
            );
            drupal_add_js($carousel_js_settings, 'setting');
            drupal_add_js($carousel_2_path . "/js/carousel_2.js", 'module', 'header', FALSE, FALSE, FALSE);
            drupal_set_html_head('<link type="text/css" rel="stylesheet" media="all" href="/' . $carousel_2_path . '/css/carousel.css.php?height=' . $carousel['settings']->height . '&width=' . $carousel['settings']->width . '&controls=' . $carousel['settings']->controls . '" />');
          }
          $block['subject'] = t('!title', array(
            '!title' => @$carousel->title
          ));
          // Pass node to theme
          $block['content'] = theme('carousel_2_block', $carousel);
          //return $block;
        }
      }
    }
  }
  return $block;
}
function carousel_2_node_info() {
  return array(
    'carousel_2' => array(
      'name' => t('carousel_2'),
      'module' => 'carousel_2',
      'description' => t("Defines the carousel_2 content type."),
      'has_title' => TRUE,
      'title_label' => t('Carousel 2 Name'),
      'has_body' => FALSE
    )
  );
}
function carousel_2_form(&$node, $form_state) {
  $data = carousel_2_load_data($node);
  $carousel_2_path = drupal_get_path('module', 'carousel_2');
  $carousel_2_machine = 'carousel_2';
  $carousel_2_human = t('Carousel 2');
  //Added for legacy sites
  //Find way to check if already called
  //drupal_add_js("sites/all/libraries/jquery.ui/ui/ui.sortable.js");
  //drupal_add_js("sites/all/libraries/jquery.ui/ui/ui.droppable.js");
  drupal_add_js($carousel_2_path . "/js/carousel_2_admin.js");
  $form['title'] = array(
    '#title' => 'Carousel Title',
    '#default_value' => $node->title,
    '#type' => 'textfield',
    '#description' => t('Carousel Name.'),
    '#size' => 30,
    '#required' => TRUE,
    '#maxlength' => 64
  );
  // An unfortunate extra step (Also in carousel_2_block.tpl.php)
  // Drupal seems to remove curlies on db insert/update
  // Also see _carousel_2_image_query()
  //$image_json = '{' . $data->img . ',' . $data->img_tn . ',' . $data->link . ',' . $data->overlay_text . '}';
  $carousel_images = $data['images'];
  $carousel_settings = $data['settings'];
  $form['carousel_settings'] = array(
    '#title' => t('Carousel Settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE
  );
  $form['carousel_settings']['height'] = array(
    '#title' => 'Height',
    '#default_value' => t($carousel_settings->height != '' ? $carousel_settings->height : '300'),
    '#type' => 'textfield',
    '#description' => t('Height in pixels'),
    '#size' => 4
  );
  $form['carousel_settings']['width'] = array(
    '#title' => 'Width',
    '#default_value' => t($carousel_settings->width != '' ? $carousel_settings->width : '500'),
    '#type' => 'textfield',
    '#description' => t('Width in pixels'),
    '#size' => 4
  );
  $form['carousel_settings']['display'] = array(
    '#title' => 'Display Count',
    '#default_value' => t($carousel_settings->display != '' ? $carousel_settings->display : '1'),
    '#type' => 'textfield',
    '#description' => t('How many pictures do you want visible? This number should be divisible by the total amount of pictures. 
    	If this number is not divisible by the total amount of images, the carousel will behave as if "single incremental slide" is checked.'),
    '#size' => 2
  );
  $form['carousel_settings']['move_amount'] = array(
    '#title' => t('Single incremental slide?'),
    '#default_value' => $carousel_settings->move_amount,
    '#type' => 'checkbox'
  );
  $form['carousel_settings']['controls'] = array(
    '#title' => t('Use "Prev and Next" buttons?'),
    '#default_value' => $carousel_settings->controls,
    '#type' => 'checkbox'
  );
  $form['carousel_settings']['pager'] = array(
    '#title' => t('Use numbered pager buttons?'),
    '#default_value' => $carousel_settings->pager,
    '#type' => 'checkbox'
  );
  $form['carousel_settings']['overlay'] = array(
    '#title' => t('Use overlay text?'),
    '#default_value' => $carousel_settings->overlay,
    '#type' => 'checkbox'
  );
  $form['carousel_settings']['overlay_toggle'] = array(
    '#title' => t('Toggle overlay on mouse over?'),
    '#default_value' => $carousel_settings->overlay_toggle,
    '#type' => 'checkbox'
  );
  $form['carousel_settings']['shadowbox'] = array(
    '#title' => t('Use Shadowbox.js?'),
    '#default_value' => $carousel_settings->shadowbox,
    '#type' => 'checkbox'
  );
  $form['carousel_settings']['overlay_height'] = array(
    '#title' => t('Overlay height'),
    '#default_value' => ($carousel_settings->overlay_height != '' ? $carousel_settings->overlay_height : '150'),
    '#type' => 'textfield',
    '#description' => t('Overlay height in pixels.'),
    '#size' => 4
  );
  $form['carousel_settings']['overlay_y'] = array(
    '#title' => t('Y position'),
    '#default_value' => ($carousel_settings->overlay_y != '' ? $carousel_settings->overlay_y : '0'),
    '#type' => 'textfield',
    '#description' => t('Y position in percent. Values 0-50 equal position top. Values 51-100 equal position bottom.'),
    '#size' => 4
  );
  $form['carousel_settings']['interval_time'] = array(
    '#title' => 'Interval Time',
    '#default_value' => t($carousel_settings->interval_time != '' ? $carousel_settings->interval_time : '4000'),
    '#type' => 'textfield',
    '#description' => t('Pause time in seconds?'),
    '#size' => 4
  );
  $form['carousel_settings']['duration'] = array(
    '#title' => 'Duration',
    '#default_value' => t($carousel_settings->duration != '' ? $carousel_settings->duration : '1000'),
    '#type' => 'textfield',
    '#description' => t('Animation time in seconds?'),
    '#size' => 4
  );
  if (module_exists('flickrapi')) {
    $flickr_type = 'textfield';
  } else {
    $flickr_type = 'hidden';
  }
  $form['carousel_settings']['flickr_set'] = array(
    '#title' => 'Flickr Set',
    '#default_value' => t($carousel_settings->flickr_set != '' ? $carousel_settings->flickr_set : ''),
    '#type' => $flickr_type,
    '#description' => t('Flickr Set ID')
  );
  $form['carousel_settings']['flickr_api'] = array(
    '#title' => 'Flickr API',
    '#default_value' => t($carousel_settings->flickr_api != '' ? $carousel_settings->flickr_api : ''),
    '#type' => $flickr_type,
    '#description' => t('Flickr API Key')
  );
  $collapsed = FALSE;
  $required = TRUE;
  for ($i = 0; $i <= 50; $i++) {
    if ($carousel_images[$i]->img != '') {
      $collapsed = FALSE;
    }
    if ($i >= 3) {
      $required = FALSE;
    }
    $form['image' . $i] = array(
    	//'#prefix' => print_r($carousel_images),
      '#title' => t('Image ' . ($i + 1)),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => $collapsed,
      '#tree' => TRUE,
      '#attributes' => array(
        'class' => 'image-sortable'
      )
    );
    $form['image' . $i]['img'] = array(
      '#title' => t('Image or video URL'),
      '#default_value' => t($carousel_images[$i]->img),
      '#type' => 'textfield',
      '#description' => t('Path to image or flash video. If there is already a flash video node, type the title to auto-populate the fields.'),
      '#size' => 30,
      '#required' => $required,
      '#attributes' => array(
        'class' => 'main-image sort-input'
      ),
      '#autocomplete_path' => 'carousel_2/autocomplete'
    );
    $form['image' . $i]['img_tn'] = array(
      '#title' => t('Thumbnail Image URL'),
      '#default_value' => t($carousel_images[$i]->img_tn),
      '#type' => 'textfield',
      '#description' => t('Path to image thumbnail or flash video place holder.'),
      '#size' => 30,
      '#required' => $required,
      '#attributes' => array(
        'class' => 'main-image-tn sort-input'
      )
    );
    $form['image' . $i]['link'] = array(
      '#title' => t('Link'),
      '#default_value' => t($carousel_images[$i]->link),
      '#type' => 'textfield',
      '#description' => t('A link for the image to link to. Leave blank to open image or video in shadowbox.'),
      '#size' => 30,
      '#attributes' => array(
        'class' => 'main-image-link sort-input'
      )
    );
    $form['image' . $i]['overlay_text'] = array(
      '#title' => t('Overlay Text'),
      '#default_value' => t($carousel_images[$i]->overlay_text),
      '#type' => 'textarea',
      '#description' => t('Text to appear in image overlay'),
      '#cols' => 60,
      '#rows' => 5,
      '#attributes' => array(
        'class' => 'main-image-overlay sort-input'
      )
    );
    $form['image' . $i]['weight'] = array(
      '#title' => t('Weight'),
      '#default_value' => $carousel_images[$i]->weight != '' ? $carousel_images[$i]->weight : $i,
      '#type' => 'hidden',
      '#attributes' => array(
        'class' => 'main-image-weight sort-input'
      )
    );
    $collapsed = TRUE;
  }
  return $form;
}

function _carousel_2_image_query($carousel, $type) {
  for ($i = 0; $i <= 50; $i++) {
  	if($carousel->{image . $i}['img'] != ''){
  		db_query("INSERT INTO {carousel_2_images}
				SET `cid` = '%s',
				`weight` = '%s',
				`img` = '%s',
				`img_tn` = '%s',
				`link` = '%s',
				`overlay_text` = '%s'", 
     			$carousel->nid,
     			$carousel->{image . $i}['weight'],
      		$carousel->{image . $i}['img'],
      		$carousel->{image . $i}['img_tn'],
      		$carousel->{image . $i}['link'],
      		$carousel->{image . $i}['overlay_text']);
  	}
  } 
}
function carousel_2_view($node, $teaser = FALSE, $page = FALSE) {
  //$sql_statement = _carousel_2_image_query($node); //echo this for testing
  $node = node_prepare($node, $teaser);
  $node->content['custom_fields'] = array(
    '#value' => theme('carousel_2', $node),
    '#weight' => 1
  );
  $title = $node->title;
  $id = $node->nid;
  $carousel_settings = $node->carousel_settings;
  return $node;
}

function carousel_2_insert($node) {
  _carousel_2_image_query($node, 'insert');
  $title = $node->title;
  $id = $node->nid;
  $carousel_settings = $node->carousel_settings;
  $carousel_images = array();
  db_query("INSERT INTO {carousel_2}
		SET `nid` = '%s',
			`name` = '%s',
			`height` = '%s',
			`width` = '%s',
			`display` = '%s',
			`interval_time` = '%s',
			`duration` = '%s',
			`overlay` = '%s',
			`overlay_toggle` = '%s',
			`shadowbox` = '%s',
			`overlay_height` = '%s',
			`overlay_y` = '%s',
			`move_amount` = '%s',
			`controls` = '%s',
			`pager` = '%s',
			`flickr_set` = '%s',
			`flickr_api` = '%s'", $id, $title, $carousel_settings['height'], $carousel_settings['width'], $carousel_settings['display'], $carousel_settings['interval_time'], $carousel_settings['duration'], $carousel_settings['overlay'], $carousel_settings['overlay_toggle'], $carousel_settings['shadowbox'], $carousel_settings['overlay_height'], $carousel_settings['overlay_y'], $carousel_settings['move_amount'], $carousel_settings['controls'], $carousel_settings['pager'], $carousel_settings['flickr_set'], $carousel_settings['flickr_api']);
}
function carousel_2_update($node) {
	db_query("DELETE FROM {carousel_2_images} WHERE `cid` = '%s'", $node->nid);
  _carousel_2_image_query($node, 'update');
  $title = $node->title;
  $id = $node->nid;
  $carousel_settings = $node->carousel_settings;
  db_query("UPDATE {carousel_2}
	SET `name` = '%s',
		`height` = '%s',
		`width` = '%s',
		`display` = '%s',
		`interval_time` = '%s',
		`duration` = '%s',
		`overlay` = '%s',
		`overlay_toggle` = '%s',
		`shadowbox` = '%s',
		`overlay_height` = '%s',
		`overlay_y` = '%s',
		`move_amount` = '%s',
		`controls` = '%s',
		`pager` = '%s',
		`flickr_set` = '%s',
		`flickr_api` = '%s'
			WHERE `nid` = '" . $id . "'", $title, $carousel_settings['height'], $carousel_settings['width'], $carousel_settings['display'], $carousel_settings['interval_time'], $carousel_settings['duration'], $carousel_settings['overlay'], $carousel_settings['overlay_toggle'], $carousel_settings['shadowbox'], $carousel_settings['overlay_height'], $carousel_settings['overlay_y'], $carousel_settings['move_amount'], $carousel_settings['controls'], $carousel_settings['pager'], $carousel_settings['flickr_set'], $carousel_settings['flickr_api']);
}
function carousel_2_delete($node) {
  db_query('DELETE FROM {carousel_2} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {carousel_2_images} WHERE cid = %d', $node->nid);
}
function carousel_2_load_data($node) {
	$data = array();
	
  $data['settings'] = db_fetch_object(db_query("SELECT *
    FROM {carousel_2} WHERE nid = %d", $node->nid));
  
  $data_images = db_query("SELECT *
    FROM {carousel_2_images} WHERE cid = %d ORDER BY `weight`", $node->nid);
  
  while($row = db_fetch_object($data_images)){
  	$data['images'][$row->weight] = $row;
  }
  
  //print_r($data['images']);
  return $data;
}
function _carousel_2_autocomplete($string) {
  $matches = array();
  // add image refs
  $result = db_query_range("SELECT node.nid, node.title,
	  content_type_flash_video.field_flash_video_video_url_value,
	  content_type_flash_video.field_flash_video_image_url_value,
	  content_type_flash_video.field_flash_video_overlay_text_value 
	  	FROM {node, content_type_flash_video}
	  		WHERE node.title LIKE '%s%' 
	  			AND node.nid = content_type_flash_video.nid", $string, 0, 10);
  while ($item = db_fetch_object($result)) {
    // Create Drupal js vars
    $matches[$item->field_flash_video_video_url_value]['title'] = $item->title;
    $matches[$item->field_flash_video_video_url_value]['cnid'] = $item->nid;
    $matches[$item->field_flash_video_video_url_value]['tn'] = $item->field_flash_video_image_url_value;
    $matches[$item->field_flash_video_video_url_value]['overlay'] = strip_tags($item->field_flash_video_overlay_text_value);
  }
  print drupal_to_js($matches);
}
function carousel_2_block_list() {
  $sql = db_query("SELECT nid FROM {carousel_2}");
  $items = array();
  while ($data = db_fetch_object($sql)) {
    $items[] = node_load($data->nid);
  }
  return $items;
}
/*// Created for future import of video dimensions
function get_flash_video_node($nid){
$result = db_query_range("SELECT node.nid, node.title, 
content_type_flash_video.field_flash_video_video_url_value FROM {node, content_type_flash_video}
WHERE node.title LIKE '%s%' AND node.nid = content_type_flash_video.nid", $string, 0, 10);
while ($item = db_fetch_object($result)) {
$matches[$item->field_flash_video_video_url_value] = $item->title;
}
}*/