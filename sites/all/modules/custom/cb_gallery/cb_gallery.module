<?php
//$Id$
/**
 * Collegeboard Gallery Module / Thumbgrid
 * 
 * Author: Dean Shelton
 * Build Date: 03-2012
 * Description:
 *    Allow content editors to create gallerys of local images, remote images, and video embeds
 *    The gallery will check for Shadowbox.
 *
 */

 /**
  * Implimentation of hook_menu();
  */
function cb_gallery_menu() {
  /**
   * Listen for AJAX calls
   */
  $items['admin/cb_gallery_ajax/update_gallery'] = array(
    'page callback' => 'cb_gallery_ajax_update_gallery',
    'type' => MENU_CALLBACK, 
    'access arguments' => array('access content js'),
    );
  $items['admin/cb_gallery_ajax/media_processing'] = array(
    'page callback' => '_media_processing',
    'type' => MENU_CALLBACK, 
    'access arguments' => array('access content js'),
    );
  
  $items['admin/cb_gallery_ajax/change_sort_order/%'] = array(
    'page callback' => 'cb_gallery_ajax_change_sort_order',
    'type' => MENU_CALLBACK, 
    'page arguments' => array(3), // Pass serial data from URL to page function as an argument.
    'access arguments' => array('access content js'),
    );
  
  $items['admin/cb_gallery_ajax/%/delete_media'] = array(
    'page callback' => 'cb_gallery_ajax_delete_media',
    'type' => MENU_CALLBACK, 
    'page arguments' => array(2), // Pass serial data from URL to page function as an argument.
    'access arguments' => array('access content js'),
    );
  
  $items['admin/cb_gallery_ajax/%/edit_media'] = array(
    'page callback' => 'cb_gallery_ajax_edit_media',
    'type' => MENU_CALLBACK, 
    'page arguments' => array(2), // Pass serial data from URL to page function as an argument.
    'access arguments' => array('access content js'),
    );
  
  /**
   * Listen for Gallery edit requests
   */
  $items['admin/cb_gallery/%/edit'] = array( // Edit
    'title'=> 'Edit an Existing CB Gallery!',
    'page callback' =>'cb_gallery_edit_page',
    'page arguments' => array(2), // Pass %nid% from URL to page function as an argument.
    'access arguments' => array('access content')
    );
  
   //Listen for Gallery add requests
   
  $items['admin/cb_gallery/add'] = array( // Add
    'title'=> 'Create a NEW CB Gallery!',
    'page callback' =>'cb_gallery_add_page', // <-----send the user to the form to add a gallery!
    'access arguments' => array('access content')
    );
  return $items;
}

/**
 * cb_gallery_ajax_edit_media()
 */
function cb_gallery_ajax_edit_media($media_id) {
  $sql = "SELECT media_name, media_content, media_caption, thumbnail_path, media_type, media_sort_order
          FROM {cb_gallery_children}
          WHERE media_id = '%d';";
  $args = array($media_id);
  $result = db_query($sql,$args);
  $row = db_fetch_object($result);
  return drupal_json($row);
  
}
/**
 * cb_gallery_ajax_change_sort_order()
 */
function cb_gallery_ajax_change_sort_order($args) {
  /**
   * The Gallery ID is the first element in the string and must be seperated to
   * create a loopable array of gallery images for reorder. 
   */
  $args = explode("-",$args);
  $nid  = $args[0];
  $sqls = array();
  $i=0;
  array_shift($args);
  
  foreach($args as $media_id){
    $sql = "UPDATE {cb_gallery_children} SET media_sort_order = '%d' WHERE media_id = '%d';";
    $sql_args = array($i,$media_id,$nid);
    if(!db_query($sql,$sql_args)){
      return drupal_json(array('message_class'=>'error', 'message'=>'Oh no! There was a problem adjusting the sort order of this gallery.'));
    }
    $i++;
  }
  return drupal_json(array('message_class'=>'status', 'message'=>'The new order of these items has been saved.'));
}

function cb_gallery_ajax_delete_media($media_id) {
  $sql = "DELETE FROM {cb_gallery_children} WHERE media_id = '%d';";
  $sql_args = array($media_id);
  if(!db_query($sql,$sql_args)){
      return drupal_json(array('message_class'=>'error', 'message'=>'Oh no! There was a problem removing this media.'));
    }
  return drupal_json(array('message_class'=>'status', 'message'=>'Media has been successfully removed.'));
}
/**
 * cb_gallery_ajax_update_gallery
 */
function cb_gallery_ajax_update_gallery($nid) {
  $args = array(
    'gallery_name' =>FILTER_SANITIZE_SPECIAL_CHARS,
    'thumbnail_aspect_ratio' =>FILTER_SANITIZE_SPECIAL_CHARS,
    'viewport_shadowbox' => FILTER_SANITIZE_SPECIAL_CHARS
  );
  
  $clean = filter_input_array(INPUT_POST,$args);
  array_push($clean,$nid); // add the galleryID last.
  $sql    = "UPDATE {cb_gallery_parents} SET gallery_name='%s', thumbnail_aspect_ratio='%s', viewport_shadowbox='%s' WHERE nid = '%d';";
  db_query($sql, $clean); 
  return drupal_json(array('status' => TRUE, 'data' => '<div class="status">Gallery info saved</div>'));
}

function get_cb_gallery_info($nid) {
  $return = array();
  $sql = "SELECT
          cb_gallery_parents.gallery_name,
          cb_gallery_parents.thumbnail_aspect_ratio,
          cb_gallery_parents.viewport_shadowbox,
          cb_gallery_children.media_name,
          cb_gallery_children.media_content,
          cb_gallery_children.media_caption,
          cb_gallery_children.thumbnail_path,
          cb_gallery_children.media_type,
          cb_gallery_children.media_sort_order 
          FROM {cb_gallery_parents}
          LEFT JOIN {cb_gallery_children}
          ON cb_gallery_children.nid = cb_gallery_parents.nid
          WHERE cb_gallery_parents.nid = '%d';";
  $result = db_query($sql,$nid);
  $i=0;
  while($row=db_fetch_object($result)) {
    // gallery data simply overwrites itself during iteration
    $return['gallery_info']['gallery_name']=$row->gallery_name;
    $return['gallery_info']['thumbnail_aspect_ratio']=$row->thumbnail_aspect_ratio;
    $return['gallery_info']['viewport_shadowbox']=$row->viewport_shadowbox;
    // media data grows during iteration.
    $return['media'][$i]['media_name']=$row->media_name;
    $return['media'][$i]['media_content']=$row->media_content;
    $return['media'][$i]['media_caption']=$row->media_caption;
    $return['media'][$i]['thumbnail_path']=$row->thumbnail_path;
    $return['media'][$i]['media_sort_order']=$row->media_sort_order;
    $i++;
  }
  return $return; 
}


/**
 * @cb_gallery_exists();
 * Used to tell if a gallery exists or not.
 * Args: [string] Name of cb_gallery to test
 * Returns: [boolean]
 
function cb_gallery_exists($nid){
  //Check DB for gallery name
  $result = db_query("SELECT nid FROM {cb_gallery_parents} WHERE nid = '%d';",$nid);    
  while($row = db_fetch_array($result)){
    return TRUE; //exists
  }
  return FALSE;//does not exist
}
*/

/**
 * Menu Callback - EDIT Existing CB Gallery
 * Called when user goes to http://www.mysite.com/admin/cb_gallery/GALLERY_NAME/edit
 
function cb_gallery_edit_page($nid){
  //VARS
  $sql      = " SELECT media_id, media_name, media_content, thumbnail_path, media_caption, media_type 
                FROM {cb_gallery_children}
                WHERE nid = '%s'
                ORDER BY media_sort_order;";
  $args     = array($nid);
  $result   = db_query($sql,$args);   // Select the media for this gallery.
  $i=0;
  
  if(!cb_gallery_exists($nid)){ // If the requested gallery does not exist, stop here.
    drupal_set_message(t('The CB Gallery you requested does not exist'), 'error', FALSE);
    return FALSE; // kill form
  }
  
  // Build Form
  $output .= '<div id="cb_gallery_status"></div>';
  $output .= drupal_get_form('cb_gallery_form',NULL,$nid); // form used when EDITING an existing cb_gallery
  
  //$output .= drupal_get_form('cb_gallery_publish'); // form used when publishing queued cb_gallery
  return $output;
}
*/ 

/**
 * Menu Callback - ADD New CB Gallery
 * Called when user goes to http://www.mysite.com/admin/cb_gallery/add
  
function cb_gallery_add_page(){
  
  // Add CSS and JS  
  drupal_add_css(drupal_get_path('module', 'cb_gallery') . '/css/cb_gallery.css');
  drupal_add_js(drupal_get_path('module', 'cb_gallery') . '/js/cb_gallery.js');
  
  // Display Form
  $output = t('Add a NEW CB Gallery!');
  $output .= drupal_get_form('cb_gallery_add_form');
  return $output;
} 
*/

/**
 * Implimentation of the DRUPAL form API.
 
function cb_gallery_publish(){
  //Submit  
  $form['publish'] = array(
    '#type'=>'submit',
    '#value'=>t('Save This Gallery'),
    '#attributes' => array('class' =>'publish_button')
    );
  return $form;
}
*/

/**
 * ADD FORM
 * Form API Schema
 * This form is used to allow the user to craete a new gallery.
 * hook_form_alter is used to redirect the user to the edit page
 * for the gallery they greate using this form.
 
function cb_gallery_add_form(){
  
  insert_gallery_fields(&$form); // Include the gallery_form. Its fields are used in both the add and the edit form.
  
  $form['submit'] = array(
    '#type'=>'submit',
    '#value'=>t('Create This Gallery'),
    '#attributes' => array('class' =>'create_cb_gallery_button')
    );
  return $form;
}
*/

/**
 *  ADD FORM
 *  POST processing
 *  Handle post-validation form submission
 
function cb_gallery_add_form_submit($form, &$form_state){
  // Vars
  $gallery_name           = $form_state['values']['gallery_name'];
  $thumbnail_aspect_ratio = $form_state['values']['thumbnail_aspect_ratio'];
  $viewport_shadowbox     = $form_state['values']['viewport_shadowbox'];
  
  $insert_qry   = "INSERT
                  INTO {cb_gallery_parents} (gallery_name, thumbnail_aspect_ratio, viewport_shadowbox)
                  VALUES ('%s', '%s', '%s');";
  $select_qry   = "SELECT
                  nid
                  FROM {cb_gallery_parents}
                  WHERE gallery_name = '%s';";
  $args         = array($gallery_name, $thumbnail_aspect_ratio, $viewport_shadowbox);
  
  // Insert the new gallery into the DB.
  db_query($insert_qry,$args);
  //Return the last inserted ID.
  $nid = db_last_insert_id('cb_gallery_parents', 'gallery_name');
  
  // Tell the user what to do next.
  $message = 'Awesome! Your new CB Gallery &#39;%s&#39; has been created.';
  drupal_set_message(t($message, array('%s'=> $gallery_name)));
  
  // Send user to the edit page for this gallery
  drupal_goto('admin/cb_gallery/'.$nid.'/edit', $query = NULL, $fragment = NULL, $http_response_code = 302);
}
*/

/**
 *  @function
 *  Description
 */
function _media_processing(){
  
  // Sanitize input array.
  $args = array(
    'gallery_name'            =>FILTER_SANITIZE_SPECIAL_CHARS,
    'thumbnail_aspect_ratio'  =>FILTER_SANITIZE_SPECIAL_CHARS,
    'viewport_shadowbox'      =>FILTER_SANITIZE_SPECIAL_CHARS,
    'media_name'              =>FILTER_SANITIZE_SPECIAL_CHARS,
    'media_type'              =>FILTER_SANITIZE_SPECIAL_CHARS,
    'media_caption'           =>FILTER_SANITIZE_SPECIAL_CHARS,
    'thumbnail_path'          =>FILTER_SANITIZE_SPECIAL_CHARS,
    'video_embed_code'        =>FILTER_SANITIZE_MAGIC_QUOTES, // this is an EMBED code. It will contain HTML.
    'remote_image'            =>FILTER_SANITIZE_URL
  );
  
  $clean = filter_input_array(INPUT_POST,$args);
  $clean['media_content'] = ($clean['media_type'] == 'video' ? $clean['video_embed_code'] : $clean['remote_image']);
  return drupal_json($clean);
  /*if($edit_media_id){// This is an EDIT
    $sql = "UPDATE {cb_gallery_children} SET media_name = '%s',media_content = '%s',thumbnail_path = '%s',media_caption = '%s',media_type = '%s' WHERE media_id = '%d'";
    $args = array($clean['media_name'], $clean['media_content'], $clean['thumbnail_path'], $clean['media_caption'], $clean['media_type'], $edit_media_id);
  }else{
    // This is an INSERT. It's a new media item.
    $sql = "INSERT INTO {cb_gallery_children} (nid, media_name, media_content, thumbnail_path, media_caption, media_type) VALUES ('%d', '%s', '%s', '%s', '%s', '%s');";
    $args = array($nid, $media_name, $media_content, $thumbnail_path, $media_caption, $media_type);
  }
  // Insert the new gallery into the DB.
  if(db_query($sql,$args)){
    // Tell the user what to do next.
    $message = 'Media has been added to the gallery.';
    drupal_set_message(t($message),'status');
    return true;
  }else{
    // Tell the user what to do next.
    $message = 'There was a problem adding this media into the gallery.';
    drupal_set_message(t($message),'error');
    return false;
  }*/
}


/**
 * EDIT FORM
 * Used by users to add new media to a gallery
 * Form API Schema
 */
function cb_gallery_form($node, $form_state){
  
  // Add CSS and JS  
  drupal_add_css(drupal_get_path('module', 'cb_gallery') . '/css/cb_gallery.css');
  drupal_add_js(drupal_get_path('module', 'cb_gallery') . '/js/cb_gallery.js');
  jquery_ui_add('ui.sortable'); // This is why we need the jQuery UI installed
  
  if(isset($node->nid)){$gallery_info = get_cb_gallery_info($node->nid);} //get gallery data
  $form['gallery_info'] = array(
    '#title' => t('Gallery Information'),
    '#type' => 'fieldset',
    '#description' => t('Edit gallery specific information'),
    '#prefix' => '<div id="GalleryInformationTop"></div>',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
    );
  
  $form['gallery_info']['gallery_name'] = array(
    '#title'=> t('Gallery Name'),
    '#type'=> 'textfield',
    '#default_value'=> (isset($gallery_info['gallery_info']['gallery_name']) ? $gallery_info['gallery_info']['gallery_name'] : ''),
    '#description' => t('The name of this gallery.'),
    '#attributes' => array('class' =>'input_gallery_name'),
    '#required' => TRUE,
    '#prefix' => '<div id="live_preview"></div>'  // Inject the preview area into the form at this location.
    );
  
  $form['gallery_info']['thumbnail_aspect_ratio'] = array(
    '#title'=> t('Aspect Ratio'),
    '#type'=> 'radios',
    '#options' => array('4:3'=>'4:3.', '16:9'=>'16:9.'),
    '#default_value'=> (isset($gallery_info['gallery_info']['thumbnail_aspect_ratio']) ? $gallery_info['gallery_info']['thumbnail_aspect_ratio']: '16:9'),
    '#description' => t('The aspect ratio of thumbnail images.'),
    '#attributes' => array('class' =>'input_thumbnail_ratio'),
    '#required' => TRUE
    );
  
  $form['gallery_info']['viewport_shadowbox'] = array(
    '#title'=> t('Media Highlight Style'),
    '#type'=> 'radios',
    '#options' => array('shadowbox'=>'ShadowBox.', 'viewport'=>'Viewport.'),
    '#description' => t('When thumbnails are clicked, you can choose to open a shadowbox, or display the media in a viewport.'),
    '#attributes' => array('class' =>'input_viewport_shadowbox'),
    '#default_value'=> (isset($gallery_info['gallery_info']['viewport_shadowbox']) ? $gallery_info['gallery_info']['viewport_shadowbox'] : 'viewport'),
    '#required' => TRUE
    );
  if(isset($node->nid)){ // Being EDITed. Not ADDed.
    
    $reorder_gallery_gui .= '<h3 class="gallery_title">Change the order of your gallery.</h3>';
    $reorder_gallery_gui .= '<div id="cb_gallery_sort_status"></div>';
    $reorder_gallery_gui .= '<div id="my_cb_gallery" class="clearfix" rel="'.$node->nid.'">';
  
  if(count($gallery_info['media'])) {
    foreach($gallery_info['media'] as $media){
      //var_dump($rows);
      $media_name     = (isset($row->media_name) ? truncate_utf8($row->media_name,58, FALSE, TRUE) : ''); 
      $media_caption  = (!empty($row->media_caption) ? truncate_utf8($row->media_caption,90, FALSE, TRUE) : 'No Caption');
      
      $reorder_gallery_gui .= '<div id="img_'.$media['media_id'].'" class="dragable clearfix '.($i %2 ? 'even' : 'odd').'">';
      $reorder_gallery_gui .=  '<div class="media_menu">'.$media['media_type'].' | ';
      $reorder_gallery_gui .=    '<a class="media_edit" onclick="return false;" href="/admin/cb_gallery_ajax/'.$media['media_id'].'/edit_media">Edit</a> | ';
      $reorder_gallery_gui .=    '<a class="media_delete" onclick="return false;" href="/admin/cb_gallery_ajax/'.$media['media_id'].'/delete_media">Delete</a> | ';
      $reorder_gallery_gui .=    '<a class="media_clone" onclick="return false;" href="/admin/cb_gallery_ajax/'.$media['media_id'].'/edit_media">Clone</a>';
      $reorder_gallery_gui .=  '</div>';
      $reorder_gallery_gui .=  '<p class="img_wrapper"><img src="'.$media['thumbnail_path'].'"/></p>';
      $reorder_gallery_gui .=  '<div class="inner_wrap">';
      $reorder_gallery_gui .=    '<h2>'.$media['media_name'].'</h2>';
      $reorder_gallery_gui .=    '<p class="media_caption">&nbsp;'.$media['media_caption'].'</p>';
      $reorder_gallery_gui .=  '</div>';
      $reorder_gallery_gui .= '</div>';
      $i++;
    }
  }
    $reorder_gallery_gui .= ($i > 0 ? '' : '<div class="empty nosort">This CB Gallery is EMPTY.</div>');
    $reorder_gallery_gui .= '</div>';
  
    _new_media_form(&$form);
    $form['reorder_gallery'] = array(
      '#title' => t('Reorder Gallery'),
      '#type' => 'fieldset',
      '#description' => t('Reorder your gallery elements'),
      '#collapsible' => TRUE,
      '#attributes' => array('class' =>'reorder_gallery_fieldset'),
      '#collapsed' => TRUE
      );
    
    $form['reorder_gallery']['this_gallery'] = array(
      '#value' => $reorder_gallery_gui
      );
    
    $form['gallery_info']['update_gallery'] = array(
      '#type' => 'button',
      '#value' => t('Save Gallery Info'),
      '#prefix'=> '<div id="cb_gallery_status"></div>',
      '#ahah' => array(
        'event' => 'click', 
        'path' => 'admin/cb_gallery_ajax/update_gallery/'.$node->nid,
        'wrapper' => 'cb_gallery_status',
        'method' => 'replace',
        'effect' => 'fade'
        )
    );
  }
  return $form;
}

function _new_media_form(&$form){
  $form['new_media'] = array(
    '#title' => t('Add New Image/Video'),
    '#type' => 'fieldset',
    '#description' => t('Go ahead and add an item to your gallery using the form below. If you want to edit an existing gallery item, scroll down and click the edit button of the gallery image you want to edit! It&#39;s that easy!'),
    '#collapsible' => TRUE,
    '#attributes' => array('class' =>'new_media_fieldset'),
    '#prefix' => '<div id="NewMediaFormTop"></div>',
    '#collapsed' => TRUE
    );
  
  $form['new_media']['media_name'] = array(
    '#title'=> t('Human Readable Name For This Image or Video'),
    '#type'=> 'textfield',
    '#description' => t('This name is used in the alt tag for images and thumbnails. example: Picture of the Collegeboard Content Editors.'),
    '#attributes' => array('class' =>'input_image_name'),
    '#required' => FALSE
    );
  
  $form['new_media']['media_caption'] = array(
    '#title'=> t('Optional Image Caption (HTML okay)'),
    '#type'=> 'textarea',
    '#description' => t('Use create a caption for this image. Leave blank if you do not want a caption.'),
    '#attributes' => array('class' =>'input_image_caption'),
    '#required' => FALSE
    );
  
  $form['new_media']['thumbnail_path'] = array(
    '#title' => t('Thumbnail Image URL'),
    '#type' => 'textfield',
    '#attributes' => array('class' =>'input_thumbnail_path'),
    '#description' => t('Use this field to define a thumbnail image to use for this Image or Video.'),
    '#required' => FALSE
    );
  
  $form['new_media']['media_type'] = array(
    '#title'=> t('What type of meida are you adding to this gallery?'),
    '#description' => t('ALL images should be hosted elsewhere, already cropped to your desired aspect ratio.'),
    '#type'=> 'radios',
    '#options' => array(t('image')=>'Image.', t('video')=>'Video.'),
    '#attributes' => array('class' =>'input_object_type'),
    '#required' => FALSE
    );
  
  $form['new_media']['add_video'] = array(
    '#title' => t('Add a Video'),
    '#type' => 'fieldset',
    '#description' => t('Add a video using this fieldset.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#attributes' => array('class' => 'video_fieldset', 'style'=>'display:none;'),
    );
  
  $form['new_media']['add_image'] = array(
    '#title' => t('Add an Image'),
    '#type' => 'fieldset',
    '#description' => t('ALL images should be hosted elsewhere, already cropped to your desired aspect ratio.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#attributes' => array('class' => 'image_fieldset', 'style'=>'display:none;'),
    );
  
  $form['new_media']['add_image']['remote_image'] = array(
    '#title'=> t('Remote Image URL'),
    '#type'=> 'textfield',
    '#description' => t('Remote Image URL'),
    '#attributes' => array('class' =>'input_remote_image')
    );
  
  //Add Video
  $form['new_media']['add_video']['video_embed_code'] = array(
    '#title'=> t('Video Embed Code'),
    '#type'=> 'textarea',
    '#description' => t('Paste your video embed code here.'),
    '#attributes' => array('class' =>'input_video_embed_code')
    );
  
  
  $form['new_media']['submit_edit_media'] = array(
    '#type'=>'submit',
    '#value'=>t('Save Edits'),
    '#attributes' => array('class' =>'submit_edit_media_button', 'style'=>'display:none')
    );
  $form['new_media']['add_media_button'] = array(
    '#type'=>'submit',
    '#value'=>t('Add to Gallery'),
    '#attributes' => array('class' =>'submit_new_media', 'onclick'=> 'return false;')
    );
  
  $form['new_media']['cancel_edit_media'] = array(
    '#type'=>'submit',
    '#value'=>t('Cancel'),
    '#prefix'=>'&nbsp;&nbsp;&nbsp;',
    '#attributes' => array('class' =>'cencel_edit_media_button', 'style'=>'display:none', 'onclick'=>'return false;')
    );
  
  $form['edit_media_id'] = array(
    '#title'=> t('Video Embed Code'),
    '#type'=> 'hidden',
    '#description' => t('edit_media_id'),
    '#attributes' => array('class' =>'edit_media_id')
    );
  }
function cb_gallery_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  switch ($op){
    
    case 'insert':
    // Only the parent gallery is being created. The child elements will be coming as an 'update.'
    // Always DELETE THEN INSERT from the parent gallery. UPDATE is unnessisairy.
      
      $sql  = "DELETE FROM {cb_gallery_parents} WHERE nid='%d';";
      $args = array($node->nid);
      db_query($sql,$args);
      
      $sql  = "INSERT INTO {cb_gallery_parents} (nid, gallery_name, thumbnail_aspect_ratio, viewport_shadowbox) VALUES ('%d','%s','%s','%s');";
      $args = array($node->nid, $node->gallery_name, $node->thumbnail_aspect_ratio, $node->viewport_shadowbox);
      db_query($sql,$args);
      
    case 'update':
      $media_content = ($node->media_type == 'video' ? $node->video_embed_code : $node->remote_image);
      $sql = "INSERT INTO {cb_gallery_children} (nid, media_name, media_content, thumbnail_path, media_caption, media_type) VALUES ('%d', '%s', '%s', '%s', '%s', '%s');";
      $args = array($node->nid, $node->media_name, $media_content, $node->thumbnail_path, $node->media_caption, $node->media_type);
      db_query($sql,$args);
      
    break;
    case "view":
    //the magic.
    break;
  }
}

function cb_gallery_node_info() {
  return array(
    'cb_gallery' => array(
      'name' => t('CB Gallery'),
      'module' => 'cb_gallery',
      'description' => "Create gallerys for remote images and embeded video.",
    )
  );
}
function cb_gallery_perm() {
  return array('create cb_gallery node', 'edit own cb_gallery');
}

function press_release_help($path, $arg) {
  switch ($path) {
    case 'admin/help#cb_gallery':
      return '<p>' . t('This module was created by Dean Shelton.') . '</p>';
      break;
  }
}
function cb_gallery_access($op, $node, $account) {

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create cb_gallery', $account);
  }

  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own cb_gallery', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }
} 